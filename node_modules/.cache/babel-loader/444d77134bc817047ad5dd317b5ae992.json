{"ast":null,"code":"export function fetchImpressions() {\n  return function (dispatch, getState) {\n    var headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    var token = getState().auth.token;\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    return fetch(\"http://127.0.0.1:8000/api/impressions/\", {\n      headers: headers\n    }).then(function (res) {\n      if (res.status < 500) {\n        return res.json().then(function (data) {\n          return {\n            status: res.status,\n            data: data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(function (res) {\n      if (res.status === 200) {\n        return dispatch({\n          type: 'FETCH_IMPRESSIONS',\n          impressions: res.data\n        });\n      } else if (res.status === 401 || res.status === 403) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n}\nexport function addImpression(player, video, playlist) {\n  return function (dispatch, getState) {\n    var headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    var token = getState().auth.token;\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    var body = JSON.stringify({\n      playerId: playerId,\n      videoId: videoId,\n      playlist: playlist\n    });\n    return fetch(\"http://127.0.0.1:8000/api/impressions/\", {\n      headers: headers,\n      method: \"POST\",\n      body: body\n    }).then(function (res) {\n      if (res.status < 500) {\n        return res.json().then(function (data) {\n          return {\n            status: res.status,\n            data: data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(function (res) {\n      if (res.status === 201) {\n        return dispatch({\n          type: 'ADD_IMPRESSION',\n          impression: res.data\n        });\n      } else if (res.status === 401 || res.status === 403) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n} //export function updateImpression(index, playerId, videoId, playlist) {\n//  return (dispatch, getState) => {\n//\n//    let headers = {\"Content-Type\": \"application/json\"};\n//    let {token} = getState().auth;\n//\n//    if (token) {\n//      headers[\"Authorization\"] = `Token ${token}`;\n//    }\n//\n//    let body = JSON.stringify({playerId, videoId, playlist});\n//    let impressionId = getState().impressions[index].id;\n//    let base_url = \"http://127.0.0.1:8000/api/impressions/\"+impressionId+\"/\";\n//\n//    return fetch(base_url, {headers, method: \"PUT\", body})\n//      .then(res => {\n//        if (res.status < 500) {\n//          return res.json().then(data => {\n//            return {status: res.status, data};\n//          })\n//        } else {\n//          console.log(\"Server Error!\");\n//          throw res;\n//        }\n//      })\n//      .then(res => {\n//        if (res.status === 200) {\n//          return dispatch({type: 'UPDATE_IMPRESSION', impression: res.data, index});\n//        } else if (res.status === 401 || res.status === 403) {\n//          dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\n//          throw res.data;\n//        }\n//      })\n//  }\n//}\n\nexport function deleteImpression(index) {\n  return function (dispatch, getState) {\n    var headers = {\n      \"Content-Type\": \"application/json\"\n    };\n    var token = getState().auth.token;\n\n    if (token) {\n      headers[\"Authorization\"] = \"Token \".concat(token);\n    }\n\n    console.log(getState());\n    var impressionId = getState().impressions[index].id;\n    var base_url = \"http://127.0.0.1:8000/api/impressions/\" + impressionId + \"/\";\n    return fetch(base_url, {\n      headers: headers,\n      method: \"DELETE\"\n    }).then(function (res) {\n      if (res.status === 204) {\n        return {\n          status: res.status,\n          data: {}\n        };\n      } else if (res.status < 500) {\n        return res.json().then(function (data) {\n          return {\n            status: res.status,\n            data: data\n          };\n        });\n      } else {\n        console.log(\"Server Error!\");\n        throw res;\n      }\n    }).then(function (res) {\n      if (res.status === 204) {\n        return dispatch({\n          type: 'DELETE_IMPRESSION',\n          index: index\n        });\n      } else if (res.status === 401 || res.status === 403) {\n        dispatch({\n          type: \"AUTHENTICATION_ERROR\",\n          data: res.data\n        });\n        throw res.data;\n      }\n    });\n  };\n}","map":{"version":3,"sources":["C:\\Users\\Sarah\\PycharmProjects\\admoapi\\admoapireact2\\src\\actions\\impressions.js"],"names":["fetchImpressions","dispatch","getState","headers","token","auth","fetch","then","res","status","json","data","console","log","type","impressions","addImpression","player","video","playlist","body","JSON","stringify","playerId","videoId","method","impression","deleteImpression","index","impressionId","id","base_url"],"mappings":"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","sourcesContent":["export function fetchImpressions() {\r\n  return (dispatch, getState) => {\r\n    let headers = {\"Content-Type\": \"application/json\"};\r\n    let {token} = getState().auth;\r\n\r\n    if (token) {\r\n      headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    return fetch(\"http://127.0.0.1:8000/api/impressions/\", {headers, })\r\n      .then(res => {\r\n        if (res.status < 500) {\r\n          return res.json().then(data => {\r\n            return {status: res.status, data};\r\n          })\r\n        } else {\r\n          console.log(\"Server Error!\");\r\n          throw res;\r\n        }\r\n      })\r\n      .then(res => {\r\n        if (res.status === 200) {\r\n          return dispatch({type: 'FETCH_IMPRESSIONS', impressions: res.data});\r\n        } else if (res.status === 401 || res.status === 403) {\r\n          dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\r\n          throw res.data;\r\n        }\r\n      })\r\n  }\r\n}\r\n\r\nexport function addImpression(player, video, playlist) {\r\n  return (dispatch, getState) => {\r\n    let headers = {\"Content-Type\": \"application/json\"};\r\n    let {token} = getState().auth;\r\n\r\n    if (token) {\r\n      headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n\r\n    let body = JSON.stringify({playerId, videoId, playlist});\r\n    return fetch(\"http://127.0.0.1:8000/api/impressions/\", {headers, method: \"POST\", body})\r\n      .then(res => {\r\n        if (res.status < 500) {\r\n          return res.json().then(data => {\r\n            return {status: res.status, data};\r\n          })\r\n        } else {\r\n          console.log(\"Server Error!\");\r\n          throw res;\r\n        }\r\n      })\r\n      .then(res => {\r\n        if (res.status === 201) {\r\n          return dispatch({type: 'ADD_IMPRESSION', impression: res.data});\r\n        } else if (res.status === 401 || res.status === 403) {\r\n          dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\r\n          throw res.data;\r\n        }\r\n      })\r\n  }\r\n}\r\n\r\n//export function updateImpression(index, playerId, videoId, playlist) {\r\n//  return (dispatch, getState) => {\r\n//\r\n//    let headers = {\"Content-Type\": \"application/json\"};\r\n//    let {token} = getState().auth;\r\n//\r\n//    if (token) {\r\n//      headers[\"Authorization\"] = `Token ${token}`;\r\n//    }\r\n//\r\n//    let body = JSON.stringify({playerId, videoId, playlist});\r\n//    let impressionId = getState().impressions[index].id;\r\n//    let base_url = \"http://127.0.0.1:8000/api/impressions/\"+impressionId+\"/\";\r\n//\r\n//    return fetch(base_url, {headers, method: \"PUT\", body})\r\n//      .then(res => {\r\n//        if (res.status < 500) {\r\n//          return res.json().then(data => {\r\n//            return {status: res.status, data};\r\n//          })\r\n//        } else {\r\n//          console.log(\"Server Error!\");\r\n//          throw res;\r\n//        }\r\n//      })\r\n//      .then(res => {\r\n//        if (res.status === 200) {\r\n//          return dispatch({type: 'UPDATE_IMPRESSION', impression: res.data, index});\r\n//        } else if (res.status === 401 || res.status === 403) {\r\n//          dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\r\n//          throw res.data;\r\n//        }\r\n//      })\r\n//  }\r\n//}\r\n\r\nexport function deleteImpression(index) {\r\n  return (dispatch, getState) => {\r\n\r\n    let headers = {\"Content-Type\": \"application/json\"};\r\n    let {token} = getState().auth;\r\n\r\n    if (token) {\r\n      headers[\"Authorization\"] = `Token ${token}`;\r\n    }\r\n    console.log(getState());\r\n    let impressionId = getState().impressions[index].id;\r\n    let base_url = \"http://127.0.0.1:8000/api/impressions/\"+impressionId+\"/\";\r\n\r\n    return fetch(base_url, {headers, method: \"DELETE\"})\r\n      .then(res => {\r\n        if (res.status === 204) {\r\n          return {status: res.status, data: {}};\r\n        } else if (res.status < 500) {\r\n          return res.json().then(data => {\r\n            return {status: res.status, data};\r\n          })\r\n        } else {\r\n          console.log(\"Server Error!\");\r\n          throw res;\r\n        }\r\n      })\r\n      .then(res => {\r\n        if (res.status === 204) {\r\n          return dispatch({type: 'DELETE_IMPRESSION', index});\r\n        } else if (res.status === 401 || res.status === 403) {\r\n          dispatch({type: \"AUTHENTICATION_ERROR\", data: res.data});\r\n          throw res.data;\r\n        }\r\n      })\r\n  }}"]},"metadata":{},"sourceType":"module"}