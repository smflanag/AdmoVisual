{"ast":null,"code":"import _toConsumableArray from \"C:\\\\Users\\\\Sarah\\\\PycharmProjects\\\\admoapi\\\\admoapireact2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nvar initialState = [];\nexport default function impressions() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var impressionList = state.slice();\n\n  switch (action.type) {\n    case 'FETCH_IMPRESSIONS':\n      return action.impressions;\n\n    case 'ADD_IMPRESSION':\n      return [].concat(_toConsumableArray(state), [action.impression]);\n    //    case 'UPDATE_IMPRESSION':\n    //      let impressionToUpdate = impressionList[action.index]\n    //      impressionToUpdate.name = action.impression.name;\n    //      impressionToUpdate.url = action.impression.url;\n    //      impressionToUpdate.playlist = action.impression.playlist;\n    //      impressionList.splice(action.index, 1, impressionToUpdate);\n    //      return impressionList;\n\n    case 'DELETE_IMPRESSION':\n      impressionList.splice(action.index, 1);\n      return impressionList;\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["C:\\Users\\Sarah\\PycharmProjects\\admoapi\\admoapireact2\\src\\reducers\\impressions.js"],"names":["initialState","impressions","state","action","impressionList","slice","type","impression","splice","index"],"mappings":";AAAA,IAAMA,YAAY,GAAG,EAArB;AAIA,eAAe,SAASC,WAAT,GAAiD;AAAA,MAA5BC,KAA4B,uEAAtBF,YAAsB;AAAA,MAARG,MAAQ;AAC9D,MAAIC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAArB;;AAEA,UAAQF,MAAM,CAACG,IAAf;AAEE,SAAK,mBAAL;AACI,aAAOH,MAAM,CAACF,WAAd;;AAEJ,SAAK,gBAAL;AACE,0CAAWC,KAAX,IAAkBC,MAAM,CAACI,UAAzB;AAEN;AACA;AACA;AACA;AACA;AACA;AACA;;AAEI,SAAK,mBAAL;AACEH,MAAAA,cAAc,CAACI,MAAf,CAAsBL,MAAM,CAACM,KAA7B,EAAoC,CAApC;AACA,aAAOL,cAAP;;AAEF;AACE,aAAOF,KAAP;AArBJ;AAuBD","sourcesContent":["const initialState = [\r\n\r\n];\r\n\r\nexport default function impressions(state=initialState, action) {\r\n  let impressionList = state.slice();\r\n\r\n  switch (action.type) {\r\n\r\n    case 'FETCH_IMPRESSIONS':\r\n        return action.impressions;\r\n\r\n    case 'ADD_IMPRESSION':\r\n      return [...state, action.impression];\r\n\r\n//    case 'UPDATE_IMPRESSION':\r\n//      let impressionToUpdate = impressionList[action.index]\r\n//      impressionToUpdate.name = action.impression.name;\r\n//      impressionToUpdate.url = action.impression.url;\r\n//      impressionToUpdate.playlist = action.impression.playlist;\r\n//      impressionList.splice(action.index, 1, impressionToUpdate);\r\n//      return impressionList;\r\n\r\n    case 'DELETE_IMPRESSION':\r\n      impressionList.splice(action.index, 1);\r\n      return impressionList;\r\n\r\n    default:\r\n      return state;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}