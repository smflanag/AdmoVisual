{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\Sarah\\\\PycharmProjects\\\\admoapi\\\\admoapireact2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\Sarah\\\\PycharmProjects\\\\admoapi\\\\admoapireact2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\Sarah\\\\PycharmProjects\\\\admoapi\\\\admoapireact2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\Sarah\\\\PycharmProjects\\\\admoapi\\\\admoapireact2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\Sarah\\\\PycharmProjects\\\\admoapi\\\\admoapireact2\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Sarah\\\\PycharmProjects\\\\admoapi\\\\admoapireact2\\\\src\\\\ImpressionList.js\";\nimport React, { Component } from \"react\"; //import axios from 'axios';\n//import ImpressionList from './components/Impressions';\n\nimport { connect } from 'react-redux';\nimport { impressions, auth } from \"./actions/index\"; //class AllImpressionList extends Component {\n//    // default State object\n//    state = {\n//        impressions: []\n//    };\n//\n//    componentDidMount() {\n//        axios\n//        .get(\"http://127.0.0.1:8000/impressions\")\n//        .then(response => {\n//        //create an array of videos only with relevant data\n//            const newImpressions = response.data.map(i => {\n//            return {\n//                id: i.id,\n//                timestamp: i.timestamp,\n//                player: i.player,\n//                video: i.video,\n//                playlist: i.playlist\n//                };\n//            });\n//        //create a new \"State\" object without mutating the original State object\n//            const newState = Object.assign({}, this.state, {\n//                impressions: newImpressions\n//            });\n//        // store the new state object in the component's state\n//            this.setState(newState);\n//        })\n//        .catch(error => console.log(error));\n//    };\n//\n//  render() {\n//    return (\n//      <div>\n//        <ImpressionList impressions={this.state.impressions} />\n//      </div>\n//    );\n//  }\n//}\n//\n//export default AllImpressionList;\n//\n\nvar AllImpressionList =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(AllImpressionList, _Component);\n\n  function AllImpressionList() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, AllImpressionList);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(AllImpressionList)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      player: \"\",\n      video: \"\",\n      playlist: \"\",\n      updateImpressionId: null,\n      dropdownPlaylists: [],\n      selectedPlaylist: \"\",\n      validationError: \"\"\n    };\n\n    _this.resetForm = function () {\n      _this.setState({\n        player: \"\",\n        video: \"\",\n        playlist: \"\",\n        updateImpressionId: null\n      });\n    };\n\n    _this.selectForEdit = function (id) {\n      var impression = _this.props.impressions[id];\n\n      _this.setState({\n        player: impression.player,\n        video: impression.video,\n        playlist: impression.playlist,\n        updateImpressionId: id\n      });\n    };\n\n    _this.submitImpression = function (e) {\n      e.preventDefault();\n\n      if (_this.state.updateImpressionId === null) {\n        _this.props.addImpression(_this.state.player, _this.state.video, _this.state.selectedPlaylist).then(_this.resetForm);\n      } //        else {\n      //            this.props.updateVideo(this.state.updateVideoId, this.state.name, this.state.url, this.state.playlist).then(this.resetForm);\n      //        } ##update above for impression\n\n    };\n\n    return _this;\n  }\n\n  _createClass(AllImpressionList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      this.props.fetchImpressions();\n      fetch(\"http://127.0.0.1:8000/api/playlists/\").then(function (response) {\n        return response.json();\n      }).then(function (data) {\n        var playlistsFromApi = data.map(function (dropdownPlaylist) {\n          return {\n            value: dropdownPlaylist.id,\n            display: dropdownPlaylist.name\n          };\n        });\n\n        _this2.setState({\n          dropdownPlaylists: [{\n            value: '',\n            display: '(Select the playlist)'\n          }].concat(playlistsFromApi)\n        });\n      }).catch(function (error) {\n        console.log(error);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        style: {\n          textAlign: \"right\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, this.props.user.username, \" \", React.createElement(\"a\", {\n        onClick: this.props.logout,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"logout\")), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, \"Add Impression\"), React.createElement(\"form\", {\n        onSubmit: this.submitImpression,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        value: this.state.player,\n        placeholder: \"Enter player ID here...\",\n        onChange: function onChange(e) {\n          return _this3.setState({\n            player: e.target.value\n          });\n        },\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        value: this.state.video,\n        placeholder: \"Enter video ID here...\",\n        onChange: function onChange(e) {\n          return _this3.setState({\n            video: e.target.value\n          });\n        },\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(\"select\", {\n        value: this.state.selectedPlaylist,\n        onChange: function onChange(e) {\n          return _this3.setState({\n            selectedPlaylist: e.target.value,\n            validationError: e.target.value === \"\" ? \"You must select the playlist\" : \"\"\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, this.state.dropdownPlaylists.map(function (dropdownPlaylist) {\n        return React.createElement(\"option\", {\n          key: dropdownPlaylist.value,\n          value: dropdownPlaylist.value,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 121\n          },\n          __self: this\n        }, dropdownPlaylist.display);\n      })), React.createElement(\"button\", {\n        onClick: this.resetForm,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, \"Reset\"), React.createElement(\"input\", {\n        type: \"submit\",\n        value: \"Save Impression\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      })), React.createElement(\"h3\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, \"Impressions\"), React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, this.props.impressions.map(function (impression, id) {\n        return React.createElement(\"tr\", {\n          key: \"impression_\".concat(impression.id),\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 132\n          },\n          __self: this\n        }, React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 133\n          },\n          __self: this\n        }, impression.timestamp), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 134\n          },\n          __self: this\n        }, impression.player.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 135\n          },\n          __self: this\n        }, impression.video.name), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 136\n          },\n          __self: this\n        }, impression.playlist), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this3.selectForEdit(id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 137\n          },\n          __self: this\n        }, \"edit\")), React.createElement(\"td\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, React.createElement(\"button\", {\n          onClick: function onClick() {\n            return _this3.props.deleteImpression(id);\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 138\n          },\n          __self: this\n        }, \"delete\")));\n      }))));\n    }\n  }]);\n\n  return AllImpressionList;\n}(Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    impressions: state.impressions,\n    user: state.auth.user\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    fetchImpressions: function fetchImpressions() {\n      dispatch(impressions.fetchImpressions());\n    },\n    addImpression: function addImpression(player, video, playlist) {\n      return dispatch(impressions.addImpression(player, video, playlist));\n    },\n    //    updateImpression: (id, player, video, playlist) => {\n    //      return dispatch(impressions.updateVideo(id, player, video, playlist));\n    //    },\n    deleteImpression: function deleteImpression(id) {\n      dispatch(impressions.deleteImpression(id));\n    },\n    logout: function logout() {\n      return dispatch(auth.logout());\n    }\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AllImpressionList);","map":{"version":3,"sources":["C:\\Users\\Sarah\\PycharmProjects\\admoapi\\admoapireact2\\src\\ImpressionList.js"],"names":["React","Component","connect","impressions","auth","AllImpressionList","state","player","video","playlist","updateImpressionId","dropdownPlaylists","selectedPlaylist","validationError","resetForm","setState","selectForEdit","id","impression","props","submitImpression","e","preventDefault","addImpression","then","fetchImpressions","fetch","response","json","data","playlistsFromApi","map","dropdownPlaylist","value","display","name","concat","catch","error","console","log","textAlign","user","username","logout","target","timestamp","deleteImpression","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n//import axios from 'axios';\r\n//import ImpressionList from './components/Impressions';\r\nimport {connect} from 'react-redux';\r\n\r\n\r\nimport {impressions, auth} from \"./actions/index\";\r\n\r\n//class AllImpressionList extends Component {\r\n//    // default State object\r\n//    state = {\r\n//        impressions: []\r\n//    };\r\n//\r\n//    componentDidMount() {\r\n//        axios\r\n//        .get(\"http://127.0.0.1:8000/impressions\")\r\n//        .then(response => {\r\n//        //create an array of videos only with relevant data\r\n//            const newImpressions = response.data.map(i => {\r\n//            return {\r\n//                id: i.id,\r\n//                timestamp: i.timestamp,\r\n//                player: i.player,\r\n//                video: i.video,\r\n//                playlist: i.playlist\r\n//                };\r\n//            });\r\n//        //create a new \"State\" object without mutating the original State object\r\n//            const newState = Object.assign({}, this.state, {\r\n//                impressions: newImpressions\r\n//            });\r\n//        // store the new state object in the component's state\r\n//            this.setState(newState);\r\n//        })\r\n//        .catch(error => console.log(error));\r\n//    };\r\n//\r\n//  render() {\r\n//    return (\r\n//      <div>\r\n//        <ImpressionList impressions={this.state.impressions} />\r\n//      </div>\r\n//    );\r\n//  }\r\n//}\r\n//\r\n//export default AllImpressionList;\r\n//\r\n\r\n\r\nclass AllImpressionList extends Component {\r\n    state = {\r\n        player: \"\",\r\n        video: \"\",\r\n        playlist: \"\",\r\n        updateImpressionId: null,\r\n        dropdownPlaylists: [],\r\n        selectedPlaylist: \"\",\r\n        validationError: \"\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.fetchImpressions();\r\n        fetch(\"http://127.0.0.1:8000/api/playlists/\")\r\n      .then((response) => {\r\n        return response.json();\r\n      })\r\n      .then(data => {\r\n        let playlistsFromApi = data.map(dropdownPlaylist => { return {value: dropdownPlaylist.id, display: dropdownPlaylist.name} })\r\n        this.setState({ dropdownPlaylists: [{value: '', display: '(Select the playlist)'}].concat(playlistsFromApi) });\r\n      }).catch(error => {\r\n        console.log(error);\r\n      });\r\n    }\r\n\r\n    resetForm = () => {\r\n        this.setState({player: \"\",video: \"\", playlist: \"\", updateImpressionId: null});\r\n    }\r\n\r\n    selectForEdit = (id) => {\r\n        let impression = this.props.impressions[id];\r\n        this.setState({player: impression.player, video: impression.video, playlist: impression.playlist, updateImpressionId: id});\r\n    }\r\n\r\n    submitImpression = (e) => {\r\n        e.preventDefault();\r\n        if (this.state.updateImpressionId === null) {\r\n            this.props.addImpression(this.state.player, this.state.video, this.state.selectedPlaylist).then(this.resetForm)\r\n        }\r\n//        else {\r\n//            this.props.updateVideo(this.state.updateVideoId, this.state.name, this.state.url, this.state.playlist).then(this.resetForm);\r\n//        } ##update above for impression\r\n    }\r\n\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n\r\n\r\n        <div style={{textAlign: \"right\"}}>\r\n          {this.props.user.username} <a onClick={this.props.logout}>logout</a>\r\n        </div>\r\n\r\n        <h3>Add Impression</h3>\r\n            <form onSubmit={this.submitImpression}>\r\n                <input\r\n                    value={this.state.player}\r\n                    placeholder=\"Enter player ID here...\"\r\n                    onChange={(e) => this.setState({player: e.target.value})}\r\n                    required />\r\n                <input\r\n                    value={this.state.video}\r\n                    placeholder=\"Enter video ID here...\"\r\n                    onChange={(e) => this.setState({video: e.target.value})}\r\n                    required />\r\n                <select value={this.state.selectedPlaylist}\r\n                onChange={(e) => this.setState({selectedPlaylist: e.target.value, validationError: e.target.value === \"\" ? \"You must select the playlist\" : \"\"})}>\r\n          {this.state.dropdownPlaylists.map((dropdownPlaylist) => <option key={dropdownPlaylist.value} value={dropdownPlaylist.value}>{dropdownPlaylist.display}</option>)}\r\n        </select>\r\n                <button onClick={this.resetForm}>Reset</button>\r\n                <input type=\"submit\" value=\"Save Impression\" />\r\n            </form>\r\n\r\n\r\n            <h3>Impressions</h3>\r\n            <table>\r\n              <tbody>\r\n                {this.props.impressions.map((impression, id) => (\r\n                  <tr key={`impression_${impression.id}`}>\r\n                    <td>{impression.timestamp}</td>\r\n                    <td>{impression.player.name}</td>\r\n                    <td>{impression.video.name}</td>\r\n                    <td>{impression.playlist}</td>\r\n                    <td><button onClick={() => this.selectForEdit(id)}>edit</button></td>\r\n                    <td><button onClick={() => this.props.deleteImpression(id)}>delete</button></td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    impressions: state.impressions,\r\n    user: state.auth.user,\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    fetchImpressions: () => {\r\n      dispatch(impressions.fetchImpressions());\r\n    },\r\n    addImpression: (player, video, playlist) => {\r\n      return dispatch(impressions.addImpression(player, video, playlist));\r\n    },\r\n//    updateImpression: (id, player, video, playlist) => {\r\n//      return dispatch(impressions.updateVideo(id, player, video, playlist));\r\n//    },\r\n    deleteImpression: (id) => {\r\n      dispatch(impressions.deleteImpression(id));\r\n    },\r\n    logout: () => dispatch(auth.logout()),\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AllImpressionList);"]},"metadata":{},"sourceType":"module"}